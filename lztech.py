import streamlit as st
import datetime
import json
import os
import pandas as pd
import hashlib
import matplotlib.pyplot as plt # Importar matplotlib para o gr√°fico de histograma

# Fun√ß√£o para criptografar senha
def hash_password(password):
    """Criptografa a senha usando SHA256."""
    return hashlib.sha256(password.encode()).hexdigest()

# Caminho base dos dados do usu√°rio
# Em um ambiente de produ√ß√£o (como o Streamlit Community Cloud),
# este diret√≥rio pode precisar de permiss√µes de escrita ou ser substitu√≠do
# por um banco de dados persistente (ex: Firestore, PostgreSQL).
DATA_DIR = "dados_usuarios"
os.makedirs(DATA_DIR, exist_ok=True)

# Configura√ß√£o da p√°gina e mensagem de boas-vindas
st.set_page_config(page_title="LZTech Chatbot", layout="centered")
st.markdown(f"# ü§ñ Bem-vindo ao LZTech\nüìÖ Data: {datetime.datetime.now().strftime('%d/%m/%Y')}")

# Se√ß√£o de Autentica√ß√£o na barra lateral
st.sidebar.header("üîê Login ou Cadastro")
username = st.sidebar.text_input("Usu√°rio")
password = st.sidebar.text_input("Senha", type="password")
action = st.sidebar.radio("A√ß√£o", ["Login", "Cadastrar"])

# Define o caminho do arquivo JSON para o usu√°rio atual
user_file = os.path.join(DATA_DIR, f"{username}.json")

# Fun√ß√£o para carregar dados do usu√°rio
def carregar_dados():
    """
    Carrega os dados do usu√°rio de um arquivo JSON.
    Retorna um dicion√°rio padr√£o se o arquivo n√£o existir.
    Converte entradas antigas (apenas n√∫meros) para o novo formato de dicion√°rio.
    """
    if os.path.exists(user_file):
        try:
            with open(user_file, "r", encoding="utf-8") as f:
                dados = json.load(f)
                # Verifica se a chave 'valores' existe e se √© uma lista
                if "valores" in dados and isinstance(dados["valores"], list):
                    # Converte entradas antigas (apenas n√∫meros) para o novo formato
                    novos_valores = []
                    for item in dados["valores"]:
                        if isinstance(item, (int, float)):
                            # Se for um n√∫mero, converte para o novo formato com valores padr√£o
                            novos_valores.append({
                                "valor": item,
                                "tipo_atividade": "N√£o especificado",
                                "data": "Data desconhecida"
                            })
                        elif isinstance(item, dict):
                            # Se j√° for um dicion√°rio, garante que todas as chaves existem
                            # e adiciona padr√µes se estiverem faltando
                            novos_valores.append({
                                "valor": item.get("valor", 0.0),
                                "tipo_atividade": item.get("tipo_atividade", "N√£o especificado"),
                                "data": item.get("data", "Data desconhecida")
                            })
                        else:
                            # Lida com tipos inesperados, talvez ignorando ou registrando um erro
                            st.warning(f"Tipo de dado inesperado encontrado: {type(item)}. Ignorando.")
                    dados["valores"] = novos_valores
                else:
                    # Se 'valores' n√£o existir ou n√£o for uma lista, inicializa
                    dados["valores"] = []
                return dados
        except json.JSONDecodeError:
            st.error(f"Erro ao ler o arquivo de dados para {username}. Criando um novo.")
            return {"senha": "", "valores": []}
    else:
        return {"senha": "", "valores": []}

# Fun√ß√£o para salvar dados do usu√°rio
def salvar_dados(dados):
    """Salva os dados do usu√°rio em um arquivo JSON."""
    try:
        with open(user_file, "w", encoding="utf-8") as f:
            json.dump(dados, f, indent=4) # Adiciona indenta√ß√£o para melhor legibilidade
    except IOError as e:
        st.error(f"Erro ao salvar dados para {username}: {e}")

# L√≥gica de Login ou Cadastro
if username and password:
    dados = carregar_dados()
    senha_hash = hash_password(password)

    if action == "Cadastrar":
        if os.path.exists(user_file) and dados["senha"] != "":
            # Verifica se o arquivo existe e se j√° tem uma senha definida (indicando usu√°rio existente)
            st.sidebar.warning("Usu√°rio j√° existe.")
        else:
            dados["senha"] = senha_hash
            salvar_dados(dados)
            st.sidebar.success("Cadastro realizado com sucesso!")
            st.info("Por favor, fa√ßa login com seu novo usu√°rio e senha.")
    elif action == "Login":
        if dados["senha"] == senha_hash and dados["senha"] != "":
            st.success(f"Bem-vindo, {username}!")

            # A√ß√µes dispon√≠veis ap√≥s o login
            st.markdown("### A√ß√µes dispon√≠veis:")
            st.markdown("- ‚ûï **Adicionar valor**\n- üìä **Ver todos os dados**\n- ‚ûó **Ver a soma total**\n- üìà **Gr√°fico de valores**\n- üßπ **Limpar dados**\n- üì• **Exportar CSV**")

            acao = st.selectbox("Escolha uma a√ß√£o:", ["Adicionar valor", "Ver todos os dados", "Ver a soma total", "Gr√°fico de valores", "Limpar dados", "Exportar CSV"])

            if acao == "Adicionar valor":
                valor = st.number_input("Digite um valor num√©rico para adicionar:", step=1.0, format="%.2f")
                tipo_atividade = st.text_input("Tipo de atividade (ex: Compras, Sal√°rio, Lazer):")
                data_atividade = st.date_input("Data da atividade:", datetime.date.today())

                if st.button("Adicionar"):
                    # Adiciona um dicion√°rio com valor, tipo de atividade e data
                    dados["valores"].append({
                        "valor": valor,
                        "tipo_atividade": tipo_atividade,
                        "data": data_atividade.strftime("%Y-%m-%d") # Formata a data para string
                    })
                    salvar_dados(dados)
                    st.success(f"Valor {valor} de '{tipo_atividade}' em {data_atividade.strftime('%d/%m/%Y')} adicionado com sucesso!")

            elif acao == "Ver todos os dados":
                st.write("### üìã Valores armazenados:")
                if dados["valores"]:
                    # Cria um DataFrame a partir da lista de dicion√°rios
                    df_valores = pd.DataFrame(dados["valores"])
                    st.dataframe(df_valores)
                else:
                    st.info("Nenhum valor armazenado ainda.")

            elif acao == "Ver a soma total":
                # Calcula a soma apenas dos valores num√©ricos
                total = sum([item["valor"] for item in dados["valores"]]) if dados["valores"] else 0
                st.metric("üî¢ Soma total dos dados:", total)

            elif acao == "Gr√°fico de valores":
                if dados["valores"]:
                    # Extrai apenas os valores num√©ricos para o gr√°fico de linha
                    valores_numericos = [item["valor"] for item in dados["valores"]]
                    df_grafico = pd.DataFrame(valores_numericos, columns=["Valores"])
                    st.line_chart(df_grafico)
                    st.markdown("---")
                    st.write("### Distribui√ß√£o dos Valores")
                    fig, ax = plt.subplots()
                    ax.hist(valores_numericos, bins=5, edgecolor='black') # Usa os valores num√©ricos
                    ax.set_title('Distribui√ß√£o dos Valores')
                    ax.set_xlabel('Valor')
                    ax.set_ylabel('Frequ√™ncia')
                    st.pyplot(fig)
                else:
                    st.info("Nenhum dado para exibir o gr√°fico.")

            elif acao == "Limpar dados":
                st.warning("Esta a√ß√£o remover√° todos os seus dados. Tem certeza?")
                if st.button("Confirmar limpeza dos dados"):
                    dados["valores"] = []
                    salvar_dados(dados)
                    st.success("Todos os dados foram removidos.")

            elif acao == "Exportar CSV":
                if dados["valores"]:
                    # Cria um DataFrame a partir da lista de dicion√°rios para exporta√ß√£o
                    df = pd.DataFrame(dados["valores"])
                    csv = df.to_csv(index=False).encode('utf-8')
                    st.download_button("üì• Baixar CSV", csv, f"{username}_valores.csv", "text/csv")
                else:
                    st.info("Nenhum dado para exportar.")
        else:
            st.sidebar.error("Usu√°rio ou senha incorretos, ou usu√°rio n√£o cadastrado.")
elif username or password: # Se um dos campos estiver preenchido, mas n√£o ambos
    st.sidebar.info("Por favor, preencha ambos os campos de usu√°rio e senha.")
else: # Se nenhum campo estiver preenchido
    st.sidebar.info("Digite seu usu√°rio e senha para fazer login ou cadastrar-se.")
